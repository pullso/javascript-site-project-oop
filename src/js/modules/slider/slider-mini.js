import Slider from './slider'export default class MiniSlider extends Slider {  constructor (container, next, prev, activeClass, autoplay, animate) {    super(container, next, prev, activeClass, autoplay, animate)  }    decorateSlides () {    this.slides.forEach((slide) => {      slide.classList.remove(this.activeClass)      if (this.animate) {        slide.querySelector('.card__title').style.opacity = '0.4'        slide.querySelector(          '.card__controls-arrow').style.opacity = '0'      }    })        const activeSlide = this.slides[0]    if (!activeSlide.closest('button')) {      activeSlide.classList.add(        this.activeClass)    }        if (this.animate) {      activeSlide.querySelector('.card__title').style.opacity = '1'      activeSlide.querySelector(        '.card__controls-arrow').style.opacity = '1'    }  }    nextSlide () {    if (this.slides[1].tagName === 'BUTTON') {      this.container.appendChild(this.slides[0])      this.container.appendChild(this.slides[0])    }    this.container.appendChild(this.slides[0])    this.decorateSlides()  }    bindTriggers () {    this.next.addEventListener('click', () => this.nextSlide())        this.prev.addEventListener('click', () => {      for (let i = this.slides.length - 1; i > 0; i--) {        if (this.slides[i].tagName !== 'BUTTON') {          const active = this.slides[i]          this.container.insertBefore(active, this.slides[0])          this.decorateSlides()          break        }      }          })  }    init () {    this.bindTriggers()    this.container.style.cssText = `      display: flex;      flex-wrap: wrap;      overflow: hidden;      align-items: flex-start;    `        if (this.autoplay) {      setInterval(() => this.nextSlide(), 5000)    }  }}